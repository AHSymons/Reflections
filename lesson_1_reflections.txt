How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    Vewing diff between two files found the difrensees in a huge number of lines very quickly. far quicker than posible manualy.
    this is acomplished ussing diff in Unix and FD in windows comand console comparing two files by file name FD <file name> <file name>

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can easily see changes that you have made and compair the output
    between versions. You can also see changes others make, 
    find and fix bugs like typeos 
    and restor previos versions if you brake somthing!

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Manualy commiting a change alows you to save at logical points in the code.
	This prevents to many saves if automatic saves are set and prevents saves at ilogical points. It also forms good saving habbits. Cons inclued less protection if you forget to save work and having to remember to save.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Writing code for websites, aplications, programs or games offten requires multiple files. Making changes might nesisitate changing multiple files. Its good to be bale to track chnages made together. Word docs are less likley to be inter linked.  
How can you use the commands git log and git diff to view the history of files?

    The command git log shows a log of the commits made. Use q to exit the log. The comand git diff alows you to see the difrences between two commits. use git diff <first id> <second id>

How might using version control make you more confident to make changes that
could break something?

    You can easily revert to older bversions of code if you brake somthing. you can also compair versions to see what changes might have lead to any bugs.

Now that you have your workspace set up, what do you want to try using Git for?

    writing code! 

