What happens when you initialize a repository? Why do you need to do it?

    When you create a new repository (initialize a repository), git creates a new hidden file .git that contains a bunch of meta data. this file stors the commit log and pervious versions of the files that are commited. if you do not create a new reposotiory using the git init command, there will be no git repository for the project and you will not beable to commit new versions. No version controle via git!

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a tempory place to story the files you would like to commit to the repository. An intimediat area that you can add or remove files from befor commiting them to the git repository. This alowes you to contorle what files you will like to track in the repository. You do not have to commit all of the files in the working directory. 

How can you use the staging area to make sure you have one commit per logical
change?

	you can use the staging area to select the files that are relavant to the change you have made and only commit thos. You can the write a message that relates only to thos changes.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are usful to save changes without changing the master branch. This is usful if you want to experiment with something, e.g. changing te langage, adding a feture, chagning the layout or anything else. 

How do the diagrams help you visualize the branch structure?
    
    Diagrams help by alowing you to think throgh lists and text and thing in you mind visualy. 
    
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    Merging two branches together results in the changes from both beeing added together. Diagraming helps to understand what is going on when you merge two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

    Git auto merge is usful when there are no conflicts as merges are likley to produce code that was desired and not remove cody or change code. Merging manualy when there are conflicts give the user/s an opertunity to decide what code is the best to keep. Conflict indicates when changes have been made to the same line by multiple people. So indicates when and what to talk about to resolve. 
