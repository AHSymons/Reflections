When would you want to use a remote repository rather than keeping all your work
local?

    Remote repositirys can be used when you want to share your work publicly to 
    colaborate or get help and advice.
    Remote repositorys are also a usfull place to stor work as a back up.  

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Manual pull alows the user to determain what and when to pull 
    commits made to GitHub. If this was automatic, you may end up 
    with stuff you dont want. The same gose fo push. Manual alows users to determain when and what commits to push to GitHub. i.e. what infomation to share.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branches are created within the logical progrsttion of commits.
    The can be used to make changes to files without affecting the master.

    Clones are copies of repositiorys. You can clone a repo localy or 
    from GitHub. Colnes from GitHub to local are likned via remote.
    
    Forks are copies of repositorys on GitHub. You can fork a repository
    to get a copy of it onto your GitHub profile. Forked repositorys 
    are not conected via remote. 

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It is possible to compar the changes you make localy to the origin/master 
    and keep track. If user makes a pull request it is posible to see 
    changes others have made to the GitHub repo. This infomation can be
    used to manage conflicts.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Posibly by email or in person comparing files side by side with notes on changes. Think Git and GitHub make it easier. 

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Working directly in master avoide the need to merge branches back
    in to master later. However, making changes in a seperate branch
    meaans that you can commit these changes without altering the
    master. This means that you can colaborate -each working on
    seperate features or the same- at the same time without affecting
    the master copy. you can alos ask for comments befor merging the
    work branch with the master. 

    You just saw that the workflow when making changes in a separate 
    branch is more complicated than working directly in master, 
    especially when you need to stay up-to-date with changes others are 
    making. Rather than simply pulling and pushing, you need to pull 
    changes into your local master branch, merge the local master into 
    your branch (different-oil, in our case), then push your branch to
    the remote before finally merging your branch into master, either 
    locally or on GitHub.

